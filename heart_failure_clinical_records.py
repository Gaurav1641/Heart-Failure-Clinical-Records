# -*- coding: utf-8 -*-
"""Heart Failure Clinical Records.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pan78I0qc0p9Q-O-ivYxZNaDWQZSr5Md
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = r'C:\Users\gaura\Downloads\heart_failure_clinical_records_dataset.csv'
data = pd.read_csv(file_path)

# 1. Age Distribution
plt.figure(figsize=(10, 6))
sns.histplot(data['age'], kde=True, bins=20, color='blue', alpha=0.7)
plt.title('Age Distribution of Heart Failure Patients', fontsize=16)
plt.xlabel('Age', fontsize=14)
plt.ylabel('Count', fontsize=14)
plt.show()

# 2. Death Rate Variation by Age
age_death_rate = data.groupby('age')['DEATH_EVENT'].mean()
plt.figure(figsize=(10, 6))
age_death_rate.plot(kind='line', color='red')
plt.title('Death Rate by Age', fontsize=16)
plt.xlabel('Age', fontsize=14)
plt.ylabel('Death Rate', fontsize=14)
plt.grid(True)
plt.show()

# 3. Percentage of Male and Female Patients
sex_counts = data['sex'].value_counts(normalize=True) * 100
print(f"Male: {sex_counts[1]:.2f}%, Female: {sex_counts[0]:.2f}%")

# 4. Platelet Count Across Age Groups
data['age_group'] = pd.cut(data['age'], bins=[0, 40, 60, 80, 100], labels=["<40", "40-60", "60-80", "80+"])
platelet_by_age_group = data.groupby('age_group')['platelets'].mean()
plt.figure(figsize=(10, 6))
platelet_by_age_group.plot(kind='bar', color='green')
plt.title('Mean Platelet Count by Age Group', fontsize=16)
plt.xlabel('Age Group', fontsize=14)
plt.ylabel('Platelet Count', fontsize=14)
plt.grid(axis='y')
plt.show()

# 5. Correlation Between Creatinine and Sodium Levels
correlation = data['serum_creatinine'].corr(data['serum_sodium'])
print(f"Correlation between serum creatinine and sodium levels: {correlation:.2f}")

# 6. Prevalence of High Blood Pressure by Gender
high_bp_by_gender = data.groupby('sex')['high_blood_pressure'].mean() * 100
print("High Blood Pressure Prevalence by Gender:")
print(f"Female: {high_bp_by_gender[0]:.2f}%, Male: {high_bp_by_gender[1]:.2f}%")

# 7. Smoking and Heart Failure
death_rate_by_smoking = data.groupby('smoking')['DEATH_EVENT'].mean() * 100
print("Death Rate by Smoking Status:")
print(f"Non-smokers: {death_rate_by_smoking[0]:.2f}%, Smokers: {death_rate_by_smoking[1]:.2f}%")

# 8. Patterns in Death Events by Age
age_death_distribution = data.groupby('age')['DEATH_EVENT'].sum()
plt.figure(figsize=(10, 6))
age_death_distribution.plot(kind='bar', color='purple', alpha=0.7)
plt.title('Distribution of Death Events by Age', fontsize=16)
plt.xlabel('Age', fontsize=14)
plt.ylabel('Number of Death Events', fontsize=14)
plt.grid(axis='y')
plt.show()

# 9. Ejection Fraction and Diabetes
ejection_fraction_by_diabetes = data.groupby('diabetes')['ejection_fraction'].mean()
print("Ejection Fraction by Diabetes Status:")
print(f"Non-diabetic: {ejection_fraction_by_diabetes[0]:.2f}%, Diabetic: {ejection_fraction_by_diabetes[1]:.2f}%")

# 10. Serum Creatinine Levels for Survivors vs. Non-Survivors
creatinine_by_survival = data.groupby('DEATH_EVENT')['serum_creatinine'].mean()
print("Serum Creatinine Levels by Survival Status:")
print(f"Survivors: {creatinine_by_survival[0]:.2f}, Non-survivors: {creatinine_by_survival[1]:.2f}")

